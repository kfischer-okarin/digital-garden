{"pageProps":{"note":{"id":"dr-patterns-input-actions","title":"Input Actions","desc":"","updated":1663682337448,"created":1658656908090,"custom":{},"fname":"areas.gamedev.dragonruby.patterns.input-actions","type":"note","vault":{"fsPath":".","name":"digital-garden","selfContained":true},"contentHash":"3efc523be75c3155c32b6c4f6ec3af6b","links":[{"from":{"fname":"areas.gamedev.dragonruby.patterns","id":"m9u70yufp50mimd6jg9k5o7","vaultName":"digital-garden"},"type":"backlink","position":{"start":{"line":3,"column":4,"offset":36},"end":{"line":3,"column":69,"offset":101},"indent":[]},"value":"areas.gamedev.dragonruby.patterns.input-actions"},{"from":{"fname":"areas.gamedev.dragonruby.patterns","id":"m9u70yufp50mimd6jg9k5o7","vaultName":"digital-garden"},"type":"backlink","position":{"start":{"line":4,"column":1,"offset":102},"end":{"line":4,"column":93,"offset":194},"indent":[]},"value":"areas.gamedev.dragonruby.patterns.input-actions"}],"anchors":{"input-actions":{"type":"header","text":"Input Actions","value":"input-actions","line":7,"column":0,"depth":1},"when-is-it-useful":{"type":"header","text":"When is it useful?","value":"when-is-it-useful","line":14,"column":0,"depth":2},"background--principles":{"type":"header","text":"Background & Principles","value":"background--principles","line":23,"column":0,"depth":2},"implementation-example":{"type":"header","text":"Implementation Example","value":"implementation-example","line":42,"column":0,"depth":2},"caveats--thoughts-for-more-complex-scenarios":{"type":"header","text":"Caveats & Thoughts for more complex scenarios","value":"caveats--thoughts-for-more-complex-scenarios","line":73,"column":0,"depth":2}},"children":[],"parent":"m9u70yufp50mimd6jg9k5o7","data":{}},"body":"<h1 id=\"input-actions\">Input Actions<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#input-actions\"></a></h1>\n<p>Instead of using <code>args.inputs</code> directly you parse it into an input actions objects, which is then used instead to\ncontrol your game.</p>\n<p><img src=\"/digital-garden/./assets/images/input_actions.png\" alt=\"Input Actions\"></p>\n<h2 id=\"when-is-it-useful\">When is it useful?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#when-is-it-useful\"></a></h2>\n<p>Some scenarios when this pattern can be useful:</p>\n<ul>\n<li>Having several different kinds of inputs with the same effect</li>\n<li>Configurable controls</li>\n<li>Letting an AI player control your game (character)</li>\n<li>Multiplayer</li>\n</ul>\n<p>In general I think it results in cleaner, better organized code but YMMV of course.</p>\n<h2 id=\"background--principles\">Background &#x26; Principles<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#background--principles\"></a></h2>\n<p>When developing complex pieces of software it often pays off to divide your program into separate independent small\npieces that have clear-cut responsibilities and can live independently from each other.</p>\n<p>Processing raw player inputs provided by <code>args.inputs</code> and converting them into a more abstract object describing\nactions the player takes in one distinct step at the beginning of your tick will allow you to tinker with your control\nscheme without having to track down your input code all over the place.</p>\n<p>One natural way to approach this pattern would be to imagine that your game controls could be configured in your game's\noption menu (even if you are in fact still very far away from actually having any menus). Each of the controls that\ncould be re-assigned to a different button would be one type of input event that can be returned by your processing\nfunction.</p>\n<p>Abstracting controls away to these kind of input action objects, gives you also the advantage that your remaining game\nlogic can now be called with them instead of having to pass <code>args.inputs</code> directly.</p>\n<p>If you have enemy characters that are gameplay-wise similar to your player character you could re-use your player\nupdate functions with AI produced input events.</p>\n<h2 id=\"implementation-example\">Implementation Example<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#implementation-example\"></a></h2>\n<pre class=\"language-rb\"><code class=\"language-rb\"><span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">tick</span></span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>\n  input_actions <span class=\"token operator\">=</span> process_inputs<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>inputs<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> input_actions<span class=\"token punctuation\">[</span><span class=\"token symbol\">:movement</span><span class=\"token punctuation\">]</span>\n    args<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>player<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+=</span> input_actions<span class=\"token punctuation\">[</span><span class=\"token symbol\">:movement</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token symbol\">:x</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">if</span> input_actions<span class=\"token punctuation\">[</span><span class=\"token symbol\">:jump</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\"># Jumping logic</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">process_inputs</span></span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">)</span>\n  input_actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> inputs<span class=\"token punctuation\">.</span>keyboard<span class=\"token punctuation\">.</span>key_down<span class=\"token punctuation\">.</span>space <span class=\"token operator\">||</span> inputs<span class=\"token punctuation\">.</span>keyboard<span class=\"token punctuation\">.</span>key_down<span class=\"token punctuation\">.</span>up <span class=\"token operator\">||</span> inputs<span class=\"token punctuation\">.</span>keyboard<span class=\"token punctuation\">.</span>key_down<span class=\"token punctuation\">.</span>w\n    input_actions<span class=\"token punctuation\">[</span><span class=\"token symbol\">:jump</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">if</span> inputs<span class=\"token punctuation\">.</span>keyboard<span class=\"token punctuation\">.</span>key_held<span class=\"token punctuation\">.</span>left <span class=\"token operator\">||</span> inputs<span class=\"token punctuation\">.</span>keyboard<span class=\"token punctuation\">.</span>key_held<span class=\"token punctuation\">.</span>a\n    input_actions<span class=\"token punctuation\">[</span><span class=\"token symbol\">:movement</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token symbol\">x</span><span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">elsif</span> inputs<span class=\"token punctuation\">.</span>keyboard<span class=\"token punctuation\">.</span>key_held<span class=\"token punctuation\">.</span>right <span class=\"token operator\">||</span> inputs<span class=\"token punctuation\">.</span>keyboard<span class=\"token punctuation\">.</span>key_held<span class=\"token punctuation\">.</span>d\n    input_actions<span class=\"token punctuation\">[</span><span class=\"token symbol\">:movement</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token symbol\">x</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n\n  input_actions\n<span class=\"token keyword\">end</span>\n</code></pre>\n<h2 id=\"caveats--thoughts-for-more-complex-scenarios\">Caveats &#x26; Thoughts for more complex scenarios<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#caveats--thoughts-for-more-complex-scenarios\"></a></h2>\n<ul>\n<li>You will probably have more than one set of possible actions (gameplay and inside a menu would be classic examples)\nwhich means that you will need several kinds of <code>process_inputs</code> functions for different situations (or use\n<code>if</code>/<code>case</code> statements to make the distinguishment inside one functions)</li>\n<li>You might need some kind of state in addition to the inputs if you need to process inputs that take longer than 1\ntick, like distinguishing long button presses from short ones</li>\n</ul>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/digital-garden/notes/m9u70yufp50mimd6jg9k5o7\">Patterns</a></li>\n</ul>","noteIndex":{"id":"w4mxpqpj9ftyo6pw17k3wj6","title":"Home","desc":"","updated":1660372010574,"created":1648806032875,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","name":"digital-garden","selfContained":true},"contentHash":"0d5b5a84c07edaf83aeeab9a0b1a2b42","links":[{"type":"wiki","from":{"fname":"root","id":"w4mxpqpj9ftyo6pw17k3wj6","vaultName":"digital-garden"},"value":"contact_me","position":{"start":{"line":10,"column":55,"offset":331},"end":{"line":10,"column":69,"offset":345},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"contact_me"}},{"type":"wiki","from":{"fname":"root","id":"w4mxpqpj9ftyo6pw17k3wj6","vaultName":"digital-garden"},"value":"areas.gamedev","position":{"start":{"line":14,"column":3,"offset":402},"end":{"line":14,"column":20,"offset":419},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"areas.gamedev"}},{"type":"wiki","from":{"fname":"root","id":"w4mxpqpj9ftyo6pw17k3wj6","vaultName":"digital-garden"},"value":"areas.software-development","position":{"start":{"line":15,"column":3,"offset":422},"end":{"line":15,"column":33,"offset":452},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"areas.software-development"}},{"type":"wiki","from":{"fname":"root","id":"w4mxpqpj9ftyo6pw17k3wj6","vaultName":"digital-garden"},"value":"reference.faith-and-work","position":{"start":{"line":17,"column":5,"offset":517},"end":{"line":17,"column":33,"offset":545},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"reference.faith-and-work"}},{"type":"wiki","from":{"fname":"root","id":"w4mxpqpj9ftyo6pw17k3wj6","vaultName":"digital-garden"},"value":"reference.adhd","position":{"start":{"line":19,"column":3,"offset":583},"end":{"line":19,"column":21,"offset":601},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"reference.adhd"}},{"type":"wiki","from":{"fname":"root","id":"w4mxpqpj9ftyo6pw17k3wj6","vaultName":"digital-garden"},"value":"areas.pkm","alias":"Personal Knowledge Management (PKM)","position":{"start":{"line":20,"column":3,"offset":604},"end":{"line":20,"column":52,"offset":653},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"areas.pkm"}}],"anchors":{"welcome-to-my-little-corner-of-the-internet":{"type":"header","text":"Welcome to my little corner of the internet","value":"welcome-to-my-little-corner-of-the-internet","line":7,"column":0,"depth":1},"topics-i-care-about":{"type":"header","text":"Topics I care about","value":"topics-i-care-about","line":19,"column":0,"depth":2},"media-i-enjoy":{"type":"header","text":"Media I enjoy","value":"media-i-enjoy","line":28,"column":0,"depth":2}},"children":["ckpt5dqzm4fv2ysnyyqi5q7","qexkgwym6yebjwrl1pz2wco","contact_me","gk4xjszil72ursnl10ui5ht","tu102fn6psvc3ef33p2jl5p","426vv89cwpwrk3pezm4idax","ceagbmx4k3i5sokhd3n8iyf","43bj5hyl41q0txr2e0rhcaw","sjq1fqcpyomz6hii19blfsh","krioclkr3atix89tw0300y8","5j5jqiz50loi24n5r18y9kd","hn6qnp0te5vs8l76eik6o4c"],"parent":null,"data":{},"body":"# Welcome to my little corner of the internet\n\nHey, everyone!\n\nI'm Kevin and this page is my own shot at a Digital Garden[^1].\n\nThis is a low-barrier[^2] experiment for myself to organize my thoughts and publish content and maybe find like-minded\nindividuals to connect with.\n\nThis space will slowly evolve over time. Feel free to [[contact_me]] if you want to get in touch.\n\n\n## Topics I care about\n- [[areas.gamedev]]\n- [[areas.software-development]]\n- Christian Faith and how it relates to several other areas\n  - [[reference.faith-and-work]]\n  - Faith and Creativity/Art/Media\n- [[reference.adhd]]\n- [[Personal Knowledge Management (PKM)|areas.pkm]]\n\n## Media I enjoy\n- 🇯🇵 Anime/Manga\n  - Steins;Gate\n  - Attack on Titan\n  - Death Note\n- 📺 TV Series\n  - Twelve Monkeys\n  - Dark\n  - Deep Space 9\n- 🎥 Movies\n  - Big Fish\n  - Memento\n- 📖 Books\n  - Das Haus der Geschichten (Thomas Franke)\n  - The Screwtape Letters (C.S. Lewis)\n- 🎮 Video Games\n  - Secret of Mana (SNES)\n  - Outer Wilds\n  - Undertale\n\n\n[^1]: I recommend the explanation on [Joschua's Garden](https://joschuasgarden.com/Digital+garden) and his digital garden in general.\n\n[^2]: I personally thought several times about starting a blog for sharing game development, software engineering tidbits/ramblings but my tendency for perfectionism especially with regard to minor details like names, design, style as well as the perceived pressure of having to regularly output some kind of meaningful content stopped me from actually going through with it until now.\n"},"collectionChildren":null,"customHeadContent":"<link rel=\"alternate\" type=\"application/atom+xml\" href=\"https://kfischer-okarin.github.io/digital-garden/feed.xml\">\n","config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":true,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"enableFullHierarchyNoteTitle":false,"vaults":[{"fsPath":".","name":"digital-garden","selfContained":true}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":false,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800},"preview":{"enableFMTitle":false,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"siteUrl":"https://kfischer-okarin.github.io","assetsPrefix":"/digital-garden","customHeaderPath":"header.html","enableFMTitle":false,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"My Digital Garden","description":"Kevin Fischer's Digital Garden.","author":"Kevin Fischer"},"github":{"enableEditLink":false,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enablePrettyLinks":true,"enableTaskNotes":true,"searchMode":"lookup","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}