{"pageProps":{"note":{"id":"xw4859ltsisrl772wmy95ff","title":"In-Memory r2d2 Pool","desc":"","updated":1679504496375,"created":1679503982859,"custom":{},"fname":"reference.dev.rust.code-snippets.in-memory-r2d2-pool","type":"note","vault":{"fsPath":".","name":"digital-garden","selfContained":true},"contentHash":"349d1f8bebf0450ebba4af018bff33d1","links":[],"anchors":{"in-memory-r2d2-pool":{"type":"header","text":"In-Memory r2d2 Pool","value":"in-memory-r2d2-pool","line":7,"column":0,"depth":1}},"children":[],"parent":"qb4whqj9igej5l9on0r2jhe","data":{}},"body":"<h1 id=\"in-memory-r2d2-pool\">In-Memory r2d2 Pool<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#in-memory-r2d2-pool\"></a></h1>\n<p>Made in collaboration with Bing</p>\n<pre class=\"language-rs\"><code class=\"language-rs\">use r2d2::{ManageConnection, Pool};\nuse std::collections::HashMap;\nuse std::sync::{Arc, Mutex};\n\n// - `Mutex` type provides thread-safe access to the data.\n//   Since r2d2 allows multiple threads to use the same connection pool, and each connection may be used by different\n//   threads at different times, it is important to ensure that concurrent access to the data does not cause data races\n//   or corruption. The Mutex type provides a lock-based synchronization mechanism that ensures only one thread can\n//   access the data at a time.\n// - The `Arc` provides shared ownership of the data.\n//   Since r2d2 allows connections to be cloned and returned to the pool when they are dropped, it is important to\n//   ensure that the data is not dropped prematurely when one of the clones goes out of scope. The Arc type provides a\n//   reference-counted pointer that keeps track of how many owners there are for the data and only drops it when there\n//   are no more owners left.\ntype Data = Arc&#x3C;Mutex&#x3C;HashMap&#x3C;String, String>>>;\n\n// A struct that implements ManageConnection for Data\nstruct DataManager {\n    data: Data,\n}\n\nimpl DataManager {\n    fn new() -> Self {\n        DataManager {\n            data: Arc::new(Mutex::new(HashMap::new())),\n        }\n    }\n}\n\n#[derive(Debug)]\nenum ConnectionError {\n    LockError,\n}\n\nimpl std::fmt::Display for ConnectionError {\n    fn fmt(&#x26;self, f: &#x26;mut std::fmt::Formatter) -> std::fmt::Result {\n        match self {\n            ConnectionError::LockError => write!(f, \"LockError\"),\n        }\n    }\n}\n\nimpl std::error::Error for ConnectionError {}\n\nimpl ManageConnection for DataManager {\n    type Connection = Data;\n    type Error = ConnectionError;\n\n    fn connect(&#x26;self) -> Result&#x3C;Self::Connection, Self::Error> {\n        Ok(self.data.clone())\n    }\n\n    // Check if the connection is valid by trying to lock it\n    fn is_valid(&#x26;self, conn: &#x26;mut Self::Connection) -> Result&#x3C;(), Self::Error> {\n        match conn.lock() {\n            Ok(_) => Ok(()),\n            Err(_e) => Err(ConnectionError::LockError),\n        }\n    }\n\n    // Do nothing when the connection is recycled\n    fn has_broken(&#x26;self, _conn: &#x26;mut Self::Connection) -> bool {\n        false\n    }\n}\n\n// A function that creates a connection pool\nfn create_pool() -> Pool&#x3C;DataManager> {\n    // Create a pool using the custom manager\n    Pool::builder()\n        .max_size(10)\n        .build(DataManager::new())\n        .unwrap()\n}\n</code></pre>\n<ul>\n<li><code>Mutex</code> type provides thread-safe access to the data\nSince r2d2 allows multiple threads to use the same connection pool, and each connection may be used by different\nthreads at different times, it is important to ensure that concurrent access to the data does not cause data races or\ncorruption. The Mutex type provides a lock-based synchronization mechanism that ensures only one thread can access the\ndata at a time.</li>\n<li>The <code>Arc&#x3C;Mutex&#x3C;HashMap&#x3C;String, String>>></code> type wraps the Mutex in an Arc to provide shared ownership of the data. Since r2d2 allows connections to be cloned and returned to the pool when they are dropped, it is important to ensure that the data is not dropped prematurely when one of the clones goes out of scope. The Arc type provides a reference-counted pointer that keeps track of how many owners there are for the data and only drops it when there are no more owners left.</li>\n</ul>\n<p>These choices allow us to implement a simple and safe in-memory connection manager for r2d2 that can handle concurrent and dynamic usage patterns.</p>","noteIndex":{"id":"w4mxpqpj9ftyo6pw17k3wj6","title":"Home","desc":"","updated":1660372010574,"created":1648806032875,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","name":"digital-garden","selfContained":true},"contentHash":"0d5b5a84c07edaf83aeeab9a0b1a2b42","links":[{"type":"wiki","from":{"fname":"root","id":"w4mxpqpj9ftyo6pw17k3wj6","vaultName":"digital-garden"},"value":"contact_me","position":{"start":{"line":10,"column":55,"offset":331},"end":{"line":10,"column":69,"offset":345},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"contact_me"}},{"type":"wiki","from":{"fname":"root","id":"w4mxpqpj9ftyo6pw17k3wj6","vaultName":"digital-garden"},"value":"areas.gamedev","position":{"start":{"line":14,"column":3,"offset":402},"end":{"line":14,"column":20,"offset":419},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"areas.gamedev"}},{"type":"wiki","from":{"fname":"root","id":"w4mxpqpj9ftyo6pw17k3wj6","vaultName":"digital-garden"},"value":"areas.software-development","position":{"start":{"line":15,"column":3,"offset":422},"end":{"line":15,"column":33,"offset":452},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"areas.software-development"}},{"type":"wiki","from":{"fname":"root","id":"w4mxpqpj9ftyo6pw17k3wj6","vaultName":"digital-garden"},"value":"reference.faith-and-work","position":{"start":{"line":17,"column":5,"offset":517},"end":{"line":17,"column":33,"offset":545},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"reference.faith-and-work"}},{"type":"wiki","from":{"fname":"root","id":"w4mxpqpj9ftyo6pw17k3wj6","vaultName":"digital-garden"},"value":"reference.adhd","position":{"start":{"line":19,"column":3,"offset":583},"end":{"line":19,"column":21,"offset":601},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"reference.adhd"}},{"type":"wiki","from":{"fname":"root","id":"w4mxpqpj9ftyo6pw17k3wj6","vaultName":"digital-garden"},"value":"areas.pkm","alias":"Personal Knowledge Management (PKM)","position":{"start":{"line":20,"column":3,"offset":604},"end":{"line":20,"column":52,"offset":653},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"areas.pkm"}}],"anchors":{"welcome-to-my-little-corner-of-the-internet":{"type":"header","text":"Welcome to my little corner of the internet","value":"welcome-to-my-little-corner-of-the-internet","line":7,"column":0,"depth":1},"topics-i-care-about":{"type":"header","text":"Topics I care about","value":"topics-i-care-about","line":19,"column":0,"depth":2},"media-i-enjoy":{"type":"header","text":"Media I enjoy","value":"media-i-enjoy","line":28,"column":0,"depth":2}},"children":["ckpt5dqzm4fv2ysnyyqi5q7","qexkgwym6yebjwrl1pz2wco","contact_me","gk4xjszil72ursnl10ui5ht","tu102fn6psvc3ef33p2jl5p","426vv89cwpwrk3pezm4idax","ceagbmx4k3i5sokhd3n8iyf","43bj5hyl41q0txr2e0rhcaw","sjq1fqcpyomz6hii19blfsh","krioclkr3atix89tw0300y8","5j5jqiz50loi24n5r18y9kd","hn6qnp0te5vs8l76eik6o4c"],"parent":null,"data":{},"body":"# Welcome to my little corner of the internet\n\nHey, everyone!\n\nI'm Kevin and this page is my own shot at a Digital Garden[^1].\n\nThis is a low-barrier[^2] experiment for myself to organize my thoughts and publish content and maybe find like-minded\nindividuals to connect with.\n\nThis space will slowly evolve over time. Feel free to [[contact_me]] if you want to get in touch.\n\n\n## Topics I care about\n- [[areas.gamedev]]\n- [[areas.software-development]]\n- Christian Faith and how it relates to several other areas\n  - [[reference.faith-and-work]]\n  - Faith and Creativity/Art/Media\n- [[reference.adhd]]\n- [[Personal Knowledge Management (PKM)|areas.pkm]]\n\n## Media I enjoy\n- ðŸ‡¯ðŸ‡µ Anime/Manga\n  - Steins;Gate\n  - Attack on Titan\n  - Death Note\n- ðŸ“º TV Series\n  - Twelve Monkeys\n  - Dark\n  - Deep Space 9\n- ðŸŽ¥ Movies\n  - Big Fish\n  - Memento\n- ðŸ“– Books\n  - Das Haus der Geschichten (Thomas Franke)\n  - The Screwtape Letters (C.S. Lewis)\n- ðŸŽ® Video Games\n  - Secret of Mana (SNES)\n  - Outer Wilds\n  - Undertale\n\n\n[^1]: I recommend the explanation on [Joschua's Garden](https://joschuasgarden.com/Digital+garden) and his digital garden in general.\n\n[^2]: I personally thought several times about starting a blog for sharing game development, software engineering tidbits/ramblings but my tendency for perfectionism especially with regard to minor details like names, design, style as well as the perceived pressure of having to regularly output some kind of meaningful content stopped me from actually going through with it until now.\n"},"collectionChildren":null,"customHeadContent":"<link rel=\"alternate\" type=\"application/atom+xml\" href=\"https://kfischer-okarin.github.io/digital-garden/feed.xml\">\n","config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":true,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"enableFullHierarchyNoteTitle":false,"vaults":[{"fsPath":".","name":"digital-garden","selfContained":true}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":false,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800},"preview":{"enableFMTitle":false,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"siteUrl":"https://kfischer-okarin.github.io","assetsPrefix":"/digital-garden","customHeaderPath":"header.html","enableFMTitle":false,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"My Digital Garden","description":"Kevin Fischer's Digital Garden.","author":"Kevin Fischer"},"github":{"enableEditLink":false,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enablePrettyLinks":true,"enableTaskNotes":true,"searchMode":"lookup","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}